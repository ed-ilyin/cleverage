module Cleverage.Client.Table
open Bolero.Html
open Types

type –ò–≥—Ä–æ–∫ = {
    –°–∏–º–≤–æ–ª: –°–∏–º–≤–æ–ª
    –ò–º—è: –ò–º—è
    –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: int
    –°–ø–∞—Å–∏—Ç–µ–ª—å: float
    –ú–∞—Å–æ–Ω: float
    –†–µ–ø—Ç–∏–ª–æ–∏–¥: float
    –î–µ–º–æ–Ω: float
    –†–∞–±: bool
    –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ: string list
}

type –ú–æ–¥–µ–ª—å = Map<–°–∏–º–≤–æ–ª, –ò–≥—Ä–æ–∫>
let –∏–≥—Ä–æ–∫–∏ = Map.ofList –ò–≥—Ä–∞.–∏–≥—Ä–æ–∫–∏

let –Ω–æ–≤—ã–π–ò–≥—Ä–æ–∫ —Å–∏–º–≤–æ–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = {
        –°–∏–º–≤–æ–ª = —Å–∏–º–≤–æ–ª
        –ò–º—è = Map.tryFind —Å–∏–º–≤–æ–ª –∏–≥—Ä–æ–∫–∏ |> Option.defaultValue ""
        –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        –°–ø–∞—Å–∏—Ç–µ–ª—å = 0.1
        –ú–∞—Å–æ–Ω = 0.6
        –†–µ–ø—Ç–∏–ª–æ–∏–¥ = 0.2
        –î–µ–º–æ–Ω = 0.1
        –†–∞–± = false
        –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ = []
    }

let –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ =
    Map.add –æ–Ω (
        match Map.tryFind –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ with
        | None -> –Ω–æ–≤—ã–π–ò–≥—Ä–æ–∫ –æ–Ω 1
        | Some –∏–≥—Ä–æ–∫ ->
            { –∏–≥—Ä–æ–∫ with –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + 1 }
    ) —Å–æ—Å—Ç–æ—è–Ω–∏–µ

let –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ =
    Map.add –æ–Ω (
        match Map.tryFind –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ with
        | None -> –Ω–æ–≤—ã–π–ò–≥—Ä–æ–∫ –æ–Ω -1
        | Some –∏–≥—Ä–æ–∫ ->
            { –∏–≥—Ä–æ–∫ with –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - 1 }
    ) —Å–æ—Å—Ç–æ—è–Ω–∏–µ

let –º–∞—Ç—Ä–∏—Ü–∞–ò–∑–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ =
    Map.toList —Å–æ—Å—Ç–æ—è–Ω–∏–µ |> List.map (fun (_, –∏–≥—Ä–æ–∫) ->
        [ –∏–≥—Ä–æ–∫.–°–ø–∞—Å–∏—Ç–µ–ª—å; –∏–≥—Ä–æ–∫.–ú–∞—Å–æ–Ω; –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥; –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω ]
    )

let –∏–≥—Ä–æ–∫–ò–∑–ú–∞—Ç—Ä–∏—Ü—ã —Å—Ç—Ä–æ–∫–∞–ú–∞—Ç—Ä–∏—Ü—ã –∏–≥—Ä–æ–∫ =
    match —Å—Ç—Ä–æ–∫–∞–ú–∞—Ç—Ä–∏—Ü—ã with
    | [ —Å–ø–∞—Å–∏—Ç–µ–ª—å; –º–∞—Å–æ–Ω; —Ä–µ–ø—Ç–∏–ª–æ–∏–¥; –¥–µ–º–æ–Ω ] ->
        { –∏–≥—Ä–æ–∫ with
            –°–ø–∞—Å–∏—Ç–µ–ª—å = —Å–ø–∞—Å–∏—Ç–µ–ª—å
            –ú–∞—Å–æ–Ω = –º–∞—Å–æ–Ω
            –†–µ–ø—Ç–∏–ª–æ–∏–¥ = —Ä–µ–ø—Ç–∏–ª–æ–∏–¥
            –î–µ–º–æ–Ω = –¥–µ–º–æ–Ω
        }
    | _ -> –∏–≥—Ä–æ–∫

let —Å–æ—Å—Ç–æ—è–Ω–∏–µ–ò–∑–ú–∞—Ç—Ä–∏—Ü—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü–∞ =
    Map.toList —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    |> List.map snd
    |> List.map2 –∏–≥—Ä–æ–∫–ò–∑–ú–∞—Ç—Ä–∏—Ü—ã –º–∞—Ç—Ä–∏—Ü–∞
    |> List.map (fun –∏–≥—Ä–æ–∫ -> –∏–≥—Ä–æ–∫.–°–∏–º–≤–æ–ª, –∏–≥—Ä–æ–∫)
    |> Map.ofList

let –∫–ª—é—á–ù–µ –Ω–µ–†–æ–ª—å –æ–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ =
    let —Ä–æ–ª—å =
        match –Ω–µ–†–æ–ª—å with
            –°–ø–∞—Å–∏—Ç–µ–ª—å -> 0 | –ú–∞—Å–æ–Ω -> 1 | –†–µ–ø—Ç–∏–ª–æ–∏–¥ -> 2 | –î–µ–º–æ–Ω -> 3
    let –∏–≥—Ä–æ–∫ = Map.toList —Å–æ—Å—Ç–æ—è–Ω–∏–µ |> List.map fst |> List.findIndex ((=) –æ–Ω)
    –º–∞—Ç—Ä–∏—Ü–∞–ò–∑–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    |> Matrix.changeMatrix —Ä–æ–ª—å –∏–≥—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    |> —Å–æ—Å—Ç–æ—è–Ω–∏–µ–ò–∑–ú–∞—Ç—Ä–∏—Ü—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ

let —Ä–∞–± —Å–∏–º–≤–æ–ª –º–æ–¥–µ–ª—å =
    match Map.tryFind —Å–∏–º–≤–æ–ª –º–æ–¥–µ–ª—å with
    | None -> –º–æ–¥–µ–ª—å
    | Some –∏–≥—Ä–æ–∫ -> Map.add —Å–∏–º–≤–æ–ª { –∏–≥—Ä–æ–∫ with –†–∞–± = true } –º–æ–¥–µ–ª—å

let –≤—Å–µ–í–†–∞–±—Å—Ç–≤–µ–ù–µ–î–µ–º–æ–Ω—ã =
    Map.map
        (fun _ –∏–≥—Ä–æ–∫ -> if –∏–≥—Ä–æ–∫.–†–∞–± then { –∏–≥—Ä–æ–∫ with –î–µ–º–æ–Ω = 0. } else –∏–≥—Ä–æ–∫)

let —Ç–æ—á–Ω–æ _ = 0.
let –º–æ–∂–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ = –∑–Ω–∞—á–µ–Ω–∏–µ / 2.
let –Ω–∞–æ–±–æ—Ä–æ—Ç = (*) 1.1

let –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–Ω —Å–¥–µ–ª–∞–ª –º–∏—Ä =
    match Map.tryFind –æ–Ω –º–∏—Ä with
    | None -> –º–∏—Ä
    | Some –∏–≥—Ä–æ–∫ ->
        Map.add –æ–Ω
            { –∏–≥—Ä–æ–∫ with –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ = –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ @ [ —Å–¥–µ–ª–∞–ª ] }
            –º–∏—Ä

let —Ä–∞—Å–∫–æ–ª–±–∞—Å –º–∏—Ä = function
    | –æ–Ω, –ó–µ–≤–Ω—É–ª | –æ–Ω, –ü—Ä–æ–±–∞—Å–∏–ª -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω –º–∏—Ä
    | _, –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç –µ–≥–æ  -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –µ–≥–æ –º–∏—Ä
    | –æ–Ω, –ü–æ–ª—É—á–∏–ª–ö–ª—é—á–ù–µ (—Ä–æ–ª—å, –∫—Ç–æ) ->
        –∫–ª—é—á–ù–µ —Ä–æ–ª—å –æ–Ω —Ç–æ—á–Ω–æ –º–∏—Ä |> –∫–ª—é—á–ù–µ —Ä–æ–ª—å –∫—Ç–æ —Ç–æ—á–Ω–æ
    | –æ–Ω, –ì–æ–≤–æ—Ä–∏—Ç–ß—Ç–æ–ü–æ–ª—É—á–∏–ª–ö–ª—é—á–ù–µ (—Ä–æ–ª—å, –∫—Ç–æ) ->
        –∫–ª—é—á–ù–µ —Ä–æ–ª—å –æ–Ω –º–æ–∂–µ—Ç –º–∏—Ä |> –∫–ª—é—á–ù–µ —Ä–æ–ª—å –∫—Ç–æ –º–æ–∂–µ—Ç
    | –æ–Ω, –ü—Ä–∏–∑–Ω–∞–ª—Å—è–ß—Ç–æ–ù–µ —Ä–æ–ª—å -> –∫–ª—é—á–ù–µ —Ä–æ–ª—å –æ–Ω –º–æ–∂–µ—Ç –º–∏—Ä
    | _, –ü—Ä–æ—Ä–æ—á–∏—Ç (—Å–ø–∞—Å–∏—Ç–µ–ª—å, —Ä–µ–ø—Ç–∏–ª—å1, —Ä–µ–ø—Ç–∏–ª—å2, –¥–µ–º–æ–Ω) ->
        –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∞—Å–∏—Ç–µ–ª—å –º–∏—Ä
        |> –∫–ª—é—á–ù–µ –°–ø–∞—Å–∏—Ç–µ–ª—å —Å–ø–∞—Å–∏—Ç–µ–ª—å –Ω–∞–æ–±–æ—Ä–æ—Ç
        |> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π —Ä–µ–ø—Ç–∏–ª—å1
        |> –∫–ª—é—á–ù–µ –†–µ–ø—Ç–∏–ª–æ–∏–¥ —Ä–µ–ø—Ç–∏–ª—å1 –Ω–∞–æ–±–æ—Ä–æ—Ç
        |> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π —Ä–µ–ø—Ç–∏–ª—å2
        |> –∫–ª—é—á–ù–µ –†–µ–ø—Ç–∏–ª–æ–∏–¥ —Ä–µ–ø—Ç–∏–ª—å2 –Ω–∞–æ–±–æ—Ä–æ—Ç
        |> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –¥–µ–º–æ–Ω
        |> –∫–ª—é—á–ù–µ –î–µ–º–æ–Ω –¥–µ–º–æ–Ω –Ω–∞–æ–±–æ—Ä–æ—Ç
    | –æ–Ω, –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ –º–µ–Ω—è when –º–µ–Ω—è = –ò–≥—Ä–∞.—è -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω –º–∏—Ä
    | –æ–Ω, –¢–æ–ø–∏—Ç _ -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω –º–∏—Ä
    | _, –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –Ω–µ–≥–æ –º–∏—Ä
    | –æ–Ω, –©–∞–¥–∏—Ç –º–µ–Ω—è when –º–µ–Ω—è = –ò–≥—Ä–∞.—è  -> –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ–Ω –º–∏—Ä
    | –æ–Ω, –©–∞–¥–∏—Ç –µ–≥–æ -> –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –µ–≥–æ –º–∏—Ä |> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω
    | –æ–Ω, –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –î–µ–º–æ–Ω -> —Ä–∞–± –æ–Ω –º–∏—Ä |> –≤—Å–µ–í–†–∞–±—Å—Ç–≤–µ–ù–µ–î–µ–º–æ–Ω—ã
    | –æ–Ω, –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ —Ä–æ–ª—å -> –∫–ª—é—á–ù–µ —Ä–æ–ª—å –æ–Ω —Ç–æ—á–Ω–æ –º–∏—Ä |> —Ä–∞–± –æ–Ω
    | –æ–Ω, –°–æ–≤—Ä–∞–ª -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω –º–∏—Ä
    | –æ–Ω, –°–∫–∞–∑–∞–ª–ü—Ä–∞–≤–¥—É -> –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ–Ω –º–∏—Ä
    | –æ–Ω, –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–ª ->
        –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–Ω —Å–¥–µ–ª–∞–ª –º–∏—Ä |> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω
    | _, –ü–æ—Å—Ç–∞–≤–∏–ª–ù–∞ _ | _, –î–µ–Ω—å | _, –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ | _, –ù–æ—á—å -> –º–∏—Ä

let —Ä–µ–π—Ç–∏–Ω–≥ =
    List.fold —Ä–∞—Å–∫–æ–ª–±–∞—Å (Map.map (fun —Å–∏–º–≤–æ–ª _ -> –Ω–æ–≤—ã–π–ò–≥—Ä–æ–∫ —Å–∏–º–≤–æ–ª 0) –∏–≥—Ä–æ–∫–∏)
        –ò–≥—Ä–∞.—Å–æ–±—ã—Ç–∏—è
    |> Map.toList
    |> List.map snd

// VIEW

let –∫–ª—é—á–∏–í–Ø—á–µ–π–∫—É –∫–ª—é—á–∏ =
    match Set.toList –∫–ª—é—á–∏ |> List.map (sprintf "–ù–µ-%A") with
    | [] -> ""
    | –∫–ª—é—á–∏ -> List.reduce (sprintf "%s, %s") –∫–ª—é—á–∏
    |> text

let –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å = (*) 100. >> textf "%.0f"

let –ø–ª–æ—Ö–æ—Å—Ç—å –∏–≥—Ä–æ–∫ =
    let –ø—Ä–æ—Ü–µ–Ω—Ç—ã = (–∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥ + –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω) * 100.
    let ``class`` =
        if –∏–≥—Ä–æ–∫.–†–∞–± then "progress is-medium is-warning"
        else "progress is-medium is-primary"
    progress [ attr.``class`` ``class``; attr.value –ø—Ä–æ—Ü–µ–Ω—Ç—ã; attr.max 100 ]
        [ textf "%.0f" –ø—Ä–æ—Ü–µ–Ω—Ç—ã ]

let h = text >> List.singleton >> th []

let join delimeter = function
    | [] -> ""
    | [ e ] -> e
    | list -> List.reduce (fun s1 s2 -> s1 + delimeter + s2) list

let –∫–æ–ª–æ–Ω–∫–∞ ``class`` =
    div [ join " " [ "column pt-0 pb-0"; ``class`` ] |> attr.``class`` ]

let —Ä–æ–ª—å –∑–Ω–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç =
    –∫–æ–ª–æ–Ω–∫–∞ "is-narrow role px-0" [ textf "%s %.0f%%" –∑–Ω–∞–∫ (–ø—Ä–æ—Ü–µ–Ω—Ç * 100.) ]

let d ``class`` = div [ attr.``class`` ``class`` ]

let –∏–≥—Ä–æ–∫ –∏ =
    let ``class`` =
        if –∏.–†–∞–± then "panel-block has-text-grey-lighter" else "panel-block"
    d ``class`` [
        d "panel-icon is-size-1 mr-0" [ text –∏.–°–∏–º–≤–æ–ª ]
        d "column" [
            d "columns is-mobile" [
                –∫–æ–ª–æ–Ω–∫–∞ "" [ text –∏.–ò–º—è ]
                —Ä–æ–ª—å "üßò" –∏.–°–ø–∞—Å–∏—Ç–µ–ª—å
                —Ä–æ–ª—å "üï∫" –∏.–ú–∞—Å–æ–Ω
                —Ä–æ–ª—å "ü¶ñ" –∏.–†–µ–ø—Ç–∏–ª–æ–∏–¥
                —Ä–æ–ª—å "üëø" –∏.–î–µ–º–æ–Ω
            ]
            d "columns is-mobile" [
                –∫–æ–ª–æ–Ω–∫–∞ "" [ –ø–ª–æ—Ö–æ—Å—Ç—å –∏ ]
                –∫–æ–ª–æ–Ω–∫–∞ "is-narrow role px-0"
                    [ textf "üò± %i" –∏.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ]
            ]
            // List.map (text >> List.singleton >> –∫–æ–ª–æ–Ω–∫–∞ "") –∏.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            // |> d "columns is-mobile"
        ]
    ]

let view () =
    d "columns" [
        List.map (fun (–∫—Ç–æ, —á—Ç–æ) -> div [] [ textf "%s %+A" –∫—Ç–æ —á—Ç–æ ] )
            –ò–≥—Ä–∞.—Å–æ–±—ã—Ç–∏—è
        |> List.rev
        |> d "column is-size-7"
        d "column" [ d "panel is-primary" [
            d "panel-heading" [ text –ò–≥—Ä–∞.—à–æ—É ]
            —Ä–µ–π—Ç–∏–Ω–≥
            |> List.sortBy (fun –∏–≥—Ä–æ–∫ -> –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
            |> List.sortBy (fun –∏–≥—Ä–æ–∫ -> –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥ + –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω)
            |> List.map –∏–≥—Ä–æ–∫
            |> concat
        ] ]
    ]
