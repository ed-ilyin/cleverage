module Cleverage.Client.Table
open Bolero.Html

type –°–∏–º–≤–æ–ª = string
type –ò–º—è = string
type –†–æ–ª—å = –°–ø–∞—Å–∏—Ç–µ–ª—å | –ú–∞—Å–æ–Ω | –†–µ–ø—Ç–∏–ª–æ–∏–¥ | –î–µ–º–æ–Ω

type –ò–≥—Ä–æ–∫ = {
    –°–∏–º–≤–æ–ª: –°–∏–º–≤–æ–ª
    –ò–º—è: –ò–º—è
    –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: int
    –°–ø–∞—Å–∏—Ç–µ–ª—å: float
    –ú–∞—Å–æ–Ω: float
    –†–µ–ø—Ç–∏–ª–æ–∏–¥: float
    –î–µ–º–æ–Ω: float
    –†–∞–±: bool
}

type –ú–æ–¥–µ–ª—å = Map<–°–∏–º–≤–æ–ª, –ò–≥—Ä–æ–∫>

type –î–µ–π—Å—Ç–≤–∏–µ =
    | –ó–µ–≤–Ω—É–ª
    | –ü—Ä–æ–±–∞—Å–∏–ª
    | –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç of –°–∏–º–≤–æ–ª
    | –ü–æ–ª—É—á–∏–ª–ö–ª—é—á–ù–µ of –†–æ–ª—å * –°–∏–º–≤–æ–ª
    | –ü—Ä–∏–∑–Ω–∞–ª—Å—è–ß—Ç–æ–ù–µ of –†–æ–ª—å
    | –ü—Ä–æ—Ä–æ—á–∏—Ç of
        —Å–ø–∞—Å–∏—Ç–µ–ª—å: –°–∏–º–≤–æ–ª * —Ä–µ–ø—Ç–∏–ª—å1: –°–∏–º–≤–æ–ª * —Ä–µ–ø—Ç–∏–ª—å2: –°–∏–º–≤–æ–ª * –¥–µ–º–æ–Ω: –°–∏–º–≤–æ–ª
    | –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ of –°–∏–º–≤–æ–ª
    | –ó–∞—Å–Ω—É–ª
    | –ü–æ—â–∞–¥–∏–ª of –°–∏–º–≤–æ–ª
    | –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ of –†–æ–ª—å
    | –ü–æ—Å—Ç–∞–≤–∏–ª–ù–∞ of –°–∏–º–≤–æ–ª
    | –ü–æ—Ä–∞–±–æ—â—ë–Ω–î–µ–º–æ–Ω–æ–º–ù–µ of –†–æ–ª—å * –†–æ–ª—å
    | –°–æ–≤—Ä–∞–ª
    | –°–∫–∞–∑–∞–ª–ü—Ä–∞–≤–¥—É
    | –¢–æ–ø–∏—Ç of –°–∏–º–≤–æ–ª

let –∏–≥—Ä–∞ = "MistyRose Union"
let —è = "üêô"

let –∏–≥—Ä–æ–∫–∏ =
    [   "üë∂", "–ú—É—Ç–∞–Ω—Ç"
        "üçå", "–ö–æ–º–∞–Ω–¥–æ—Ä"
        "ü¶ñ", "–ë—É—Ä–∞—Ç–∏–Ω–æ"
        "‚ôü", "–ñ–º—ã—Ö"
        "üë£", "–ú–∞—Ä–∫–∏–∑–∞"
        "üçë", "–ó–∞–±–∞–≤–∞"
        "ü§¨", "–ê—Å—Ç—Ä–æ–Ω–∞–≤—Ç"
        "–≠", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫"
        "üêô", "–ö—Ä–∞–∫–µ–Ω"
        "–ö", "–ö—É–ø–∏–¥–æ–Ω"
    ] |> Map.ofList

let —Å–æ–±—ã—Ç–∏—è = [
    "üêô", –ü—Ä–∏–∑–Ω–∞–ª—Å—è–ß—Ç–æ–ù–µ –°–ø–∞—Å–∏—Ç–µ–ª—å
    "üêô", –ü—Ä–∏–∑–Ω–∞–ª—Å—è–ß—Ç–æ–ù–µ –†–µ–ø—Ç–∏–ª–æ–∏–¥
    "üêô", –ü—Ä–∏–∑–Ω–∞–ª—Å—è–ß—Ç–æ–ù–µ –î–µ–º–æ–Ω
    "‚ôü", –ó–µ–≤–Ω—É–ª
    "‚ôü", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "–ö"
    "üë£", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "–≠"
    "ü¶ñ", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üçë"
    "üë∂", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "–ö"
    "–≠", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "–ö"
    "üçå", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "–ö"
    "ü§¨", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "–ö"
    "üçë", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "ü¶ñ"
    "üêô", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "‚ôü"
    "–ö", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "ü¶ñ"
    "‚ôü", –°–∫–∞–∑–∞–ª–ü—Ä–∞–≤–¥—É
    "ü§¨", –°–æ–≤—Ä–∞–ª
    "–ö", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –î–µ–º–æ–Ω
    "ü¶ñ", –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç "üë∂"
    "üêô", –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç "üë∂"
    "üêô", –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç "üçå"
    "ü¶ñ", –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç "üçå"
    "–≠", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –ú–∞—Å–æ–Ω
    "–≠", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –†–µ–ø—Ç–∏–ª–æ–∏–¥
    "üë∂", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –î–µ–º–æ–Ω
    "‚ôü", –ü—Ä–∏–∑–Ω–∞–ª—Å—è–ß—Ç–æ–ù–µ –°–ø–∞—Å–∏—Ç–µ–ª—å
    // –ö–æ–µ-–∫—Ç–æ –ø–æ–ª—É—á–∏–ª –¢–ó
    "üêô", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "ü§¨"
    "ü§¨", –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç "‚ôü"
    "üêô", –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç "üçë"
    "üêô", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "ü§¨"
    "ü§¨", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "‚ôü"
    "üçë", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "ü¶ñ"
    "üë£", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "ü¶ñ"
    "ü¶ñ", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üçë"
    "‚ôü", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üêô"
    "üçå", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üêô"
    "ü§¨", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –î–µ–º–æ–Ω
    "üçå", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –†–µ–ø—Ç–∏–ª–æ–∏–¥
    "üçå", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –°–ø–∞—Å–∏—Ç–µ–ª—å
    "ü¶ñ", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –†–µ–ø—Ç–∏–ª–æ–∏–¥
    "üçå", –ü–æ–ª—É—á–∏–ª–ö–ª—é—á–ù–µ (–°–ø–∞—Å–∏—Ç–µ–ª—å, "–ö")
    // –ú–∞—Ä–∫–∏–∑–∞ –ø–æ—á–µ–º—É –ñ–º—ã—Ö –Ω–µ-–î–µ–º–æ–Ω?
]

let –Ω–æ–≤—ã–π–ò–≥—Ä–æ–∫ —Å–∏–º–≤–æ–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = {
        –°–∏–º–≤–æ–ª = —Å–∏–º–≤–æ–ª
        –ò–º—è = Map.tryFind —Å–∏–º–≤–æ–ª –∏–≥—Ä–æ–∫–∏ |> Option.defaultValue ""
        –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        –°–ø–∞—Å–∏—Ç–µ–ª—å = 0.1
        –ú–∞—Å–æ–Ω = 0.6
        –†–µ–ø—Ç–∏–ª–æ–∏–¥ = 0.2
        –î–µ–º–æ–Ω = 0.1
        –†–∞–± = false
    }

let –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ =
    Map.add –æ–Ω (
        match Map.tryFind –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ with
        | None -> –Ω–æ–≤—ã–π–ò–≥—Ä–æ–∫ –æ–Ω 1
        | Some –∏–≥—Ä–æ–∫ ->
            { –∏–≥—Ä–æ–∫ with –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + 1 }
    ) —Å–æ—Å—Ç–æ—è–Ω–∏–µ

let –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ =
    Map.add –æ–Ω (
        match Map.tryFind –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ with
        | None -> –Ω–æ–≤—ã–π–ò–≥—Ä–æ–∫ –æ–Ω -1
        | Some –∏–≥—Ä–æ–∫ ->
            { –∏–≥—Ä–æ–∫ with –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - 1 }
    ) —Å–æ—Å—Ç–æ—è–Ω–∏–µ

let –¥–æ–±–∞–≤—å–ü—Ä–æ—Ü–µ–Ω—Ç—ã–û—Ç–ì–∫–î –∞ –± –≤ –≥ –¥ = –¥ + –≥ / (–∞ + –± + –≤) * –¥

let –¥–æ–±–∞–≤—å–ü—Ä–æ—Ü–µ–Ω—Ç—ã–ö _ _ _ –º–æ–¥–µ–ª—å –∏–≥—Ä–æ–∫ = Map.add –∏–≥—Ä–æ–∫.–°–∏–º–≤–æ–ª –∏–≥—Ä–æ–∫ –º–æ–¥–µ–ª—å

let –º–∞—Ç—Ä–∏—Ü–∞–ò–∑–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ =
    Map.toList —Å–æ—Å—Ç–æ—è–Ω–∏–µ |> List.map (fun (_, –∏–≥—Ä–æ–∫) ->
        [ –∏–≥—Ä–æ–∫.–°–ø–∞—Å–∏—Ç–µ–ª—å; –∏–≥—Ä–æ–∫.–ú–∞—Å–æ–Ω; –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥; –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω ]
    )

let –∏–≥—Ä–æ–∫–ò–∑–ú–∞—Ç—Ä–∏—Ü—ã —Å—Ç—Ä–æ–∫–∞–ú–∞—Ç—Ä–∏—Ü—ã –∏–≥—Ä–æ–∫ =
    match —Å—Ç—Ä–æ–∫–∞–ú–∞—Ç—Ä–∏—Ü—ã with
    | [ —Å–ø–∞—Å–∏—Ç–µ–ª—å; –º–∞—Å–æ–Ω; —Ä–µ–ø—Ç–∏–ª–æ–∏–¥; –¥–µ–º–æ–Ω ] ->
        { –∏–≥—Ä–æ–∫ with
            –°–ø–∞—Å–∏—Ç–µ–ª—å = —Å–ø–∞—Å–∏—Ç–µ–ª—å
            –ú–∞—Å–æ–Ω = –º–∞—Å–æ–Ω
            –†–µ–ø—Ç–∏–ª–æ–∏–¥ = —Ä–µ–ø—Ç–∏–ª–æ–∏–¥
            –î–µ–º–æ–Ω = –¥–µ–º–æ–Ω
        }
    | _ -> –∏–≥—Ä–æ–∫

let —Å–æ—Å—Ç–æ—è–Ω–∏–µ–ò–∑–ú–∞—Ç—Ä–∏—Ü—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü–∞ =
    Map.toList —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    |> List.map snd
    |> List.map2 –∏–≥—Ä–æ–∫–ò–∑–ú–∞—Ç—Ä–∏—Ü—ã –º–∞—Ç—Ä–∏—Ü–∞
    |> List.map (fun –∏–≥—Ä–æ–∫ -> –∏–≥—Ä–æ–∫.–°–∏–º–≤–æ–ª, –∏–≥—Ä–æ–∫)
    |> Map.ofList

let –∫–ª—é—á–ù–µ –Ω–µ–†–æ–ª—å –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ =
    let —Ä–æ–ª—å =
        match –Ω–µ–†–æ–ª—å with
            –°–ø–∞—Å–∏—Ç–µ–ª—å -> 0 | –ú–∞—Å–æ–Ω -> 1 | –†–µ–ø—Ç–∏–ª–æ–∏–¥ -> 2 | –î–µ–º–æ–Ω -> 3
    let –∏–≥—Ä–æ–∫ = Map.toList —Å–æ—Å—Ç–æ—è–Ω–∏–µ |> List.map fst |> List.findIndex ((=) –æ–Ω)
    –º–∞—Ç—Ä–∏—Ü–∞–ò–∑–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    |> Matrix.changeMatrix —Ä–æ–ª—å –∏–≥—Ä–æ–∫ 0.
    |> —Å–æ—Å—Ç–æ—è–Ω–∏–µ–ò–∑–ú–∞—Ç—Ä–∏—Ü—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ

let —Ä–∞–± —Å–∏–º–≤–æ–ª –º–æ–¥–µ–ª—å =
    match Map.tryFind —Å–∏–º–≤–æ–ª –º–æ–¥–µ–ª—å with
    | None -> –º–æ–¥–µ–ª—å
    | Some –∏–≥—Ä–æ–∫ -> Map.add —Å–∏–º–≤–æ–ª { –∏–≥—Ä–æ–∫ with –†–∞–± = true } –º–æ–¥–µ–ª—å

let –≤—Å–µ–í–†–∞–±—Å—Ç–≤–µ–ù–µ–î–µ–º–æ–Ω—ã =
    Map.map
        (fun _ –∏–≥—Ä–æ–∫ -> if –∏–≥—Ä–æ–∫.–†–∞–± then { –∏–≥—Ä–æ–∫ with –î–µ–º–æ–Ω = 0. } else –∏–≥—Ä–æ–∫)

let —Ä–∞—Å–∫–æ–ª–±–∞—Å –º–∏—Ä = function
    | –æ–Ω, –ó–µ–≤–Ω—É–ª | –æ–Ω, –ü—Ä–æ–±–∞—Å–∏–ª -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω –º–∏—Ä
    | _, –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç –µ–≥–æ  -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –µ–≥–æ –º–∏—Ä
    | –æ–Ω, –ü–æ–ª—É—á–∏–ª–ö–ª—é—á–ù–µ (—Ä–æ–ª—å, –∫—Ç–æ) ->
        –∫–ª—é—á–ù–µ —Ä–æ–ª—å –æ–Ω –º–∏—Ä |> –∫–ª—é—á–ù–µ —Ä–æ–ª—å –∫—Ç–æ
    | –æ–Ω, –ü—Ä–∏–∑–Ω–∞–ª—Å—è–ß—Ç–æ–ù–µ —Ä–æ–ª—å -> –∫–ª—é—á–ù–µ —Ä–æ–ª—å –æ–Ω –º–∏—Ä
    | –æ–Ω, –ü—Ä–æ—Ä–æ—á–∏—Ç (—Å–ø–∞—Å–∏—Ç–µ–ª—å, —Ä–µ–ø—Ç–∏–ª—å1, —Ä–µ–ø—Ç–∏–ª—å2, –¥–µ–º–æ–Ω) ->
        –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∞—Å–∏—Ç–µ–ª—å –º–∏—Ä
        |> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π —Ä–µ–ø—Ç–∏–ª—å1
        |> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π —Ä–µ–ø—Ç–∏–ª—å2
        |> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –¥–µ–º–æ–Ω
    | –æ–Ω, –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ –º–µ–Ω—è when –º–µ–Ω—è = —è -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω –º–∏—Ä
    | –æ–Ω, –¢–æ–ø–∏—Ç –µ–≥–æ -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω –º–∏—Ä
    | –æ–Ω, –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –Ω–µ–≥–æ –º–∏—Ä
    | –æ–Ω, –ü–æ—â–∞–¥–∏–ª –µ–≥–æ -> –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –µ–≥–æ –º–∏—Ä
    | –æ–Ω, –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –î–µ–º–æ–Ω -> —Ä–∞–± –æ–Ω –º–∏—Ä |> –≤—Å–µ–í–†–∞–±—Å—Ç–≤–µ–ù–µ–î–µ–º–æ–Ω—ã
    | –æ–Ω, –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ —Ä–æ–ª—å -> –∫–ª—é—á–ù–µ —Ä–æ–ª—å –æ–Ω –º–∏—Ä |> —Ä–∞–± –æ–Ω
    | –æ–Ω, –ü–æ—Ä–∞–±–æ—â—ë–Ω–î–µ–º–æ–Ω–æ–º–ù–µ (—Ä–æ–ª—å1, —Ä–æ–ª—å2) ->
        –∫–ª—é—á–ù–µ —Ä–æ–ª—å1 –æ–Ω –º–∏—Ä |> –∫–ª—é—á–ù–µ —Ä–æ–ª—å2 –æ–Ω |> —Ä–∞–± –æ–Ω
    | –æ–Ω, –°–æ–≤—Ä–∞–ª -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω –º–∏—Ä
    | –æ–Ω, –°–∫–∞–∑–∞–ª–ü—Ä–∞–≤–¥—É -> –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ–Ω –º–∏—Ä
    | _ -> –º–∏—Ä

let —Ä–µ–π—Ç–∏–Ω–≥ =
    List.fold —Ä–∞—Å–∫–æ–ª–±–∞—Å (Map.map (fun —Å–∏–º–≤–æ–ª _ -> –Ω–æ–≤—ã–π–ò–≥—Ä–æ–∫ —Å–∏–º–≤–æ–ª 0) –∏–≥—Ä–æ–∫–∏)
        —Å–æ–±—ã—Ç–∏—è
    |> Map.toList
    |> List.map snd

// VIEW

let –∫–ª—é—á–∏–í–Ø—á–µ–π–∫—É –∫–ª—é—á–∏ =
    match Set.toList –∫–ª—é—á–∏ |> List.map (sprintf "–ù–µ-%A") with
    | [] -> ""
    | –∫–ª—é—á–∏ -> List.reduce (sprintf "%s, %s") –∫–ª—é—á–∏
    |> text |> List.singleton |> td []

let –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å = (*) 100. >> sprintf "%.0f" >> text >> List.singleton >> td []
let –ø–ª–æ—Ö–æ—Å—Ç—å –∏–≥—Ä–æ–∫ =
    let –ø—Ä–æ—Ü–µ–Ω—Ç—ã = (–∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥ + –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω) * 100.
    let —Ç–µ–∫—Å—Ç = sprintf "%.0f" –ø—Ä–æ—Ü–µ–Ω—Ç—ã |> text
    td [ attr.width "200px" ] [
        progress [
            attr.``class`` "progress"
            attr.value –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            attr.max 100
        ] [ —Ç–µ–∫—Å—Ç ]
    ]

let h = text >> List.singleton >> th []

let view =
    table [ attr.``class`` "table" ] [
        thead []
            [ h ""; h "–ò–≥—Ä–æ–∫"; h "–ü–æ"; h "–°–ø"; h "–ú–∞"; h "–ó–ª–æ"; h "–†–µ"; h "–î–µ" ]
        —Ä–µ–π—Ç–∏–Ω–≥
        |> List.sortBy (fun –∏–≥—Ä–æ–∫ -> –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥ + –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω)
        |> List.sortBy (fun –∏–≥—Ä–æ–∫ -> –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
        |> List.map (fun –∏–≥—Ä–æ–∫ ->
            tr [] [
                td [] [ text –∏–≥—Ä–æ–∫.–°–∏–º–≤–æ–ª ]
                td [
                    if –∏–≥—Ä–æ–∫.–†–∞–± then "is-black" else ""
                    |> attr.``class``
                ] [ Map.tryFind –∏–≥—Ä–æ–∫.–°–∏–º–≤–æ–ª –∏–≥—Ä–æ–∫–∏
                    |> Option.defaultValue ""
                    |> text
                ]
                td [] [ string –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å |> text ]
                –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫.–°–ø–∞—Å–∏—Ç–µ–ª—å
                –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫.–ú–∞—Å–æ–Ω
                –ø–ª–æ—Ö–æ—Å—Ç—å –∏–≥—Ä–æ–∫
                –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥
                –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω
                // –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (
                //     –∏–≥—Ä–æ–∫.–°–ø–∞—Å–∏—Ç–µ–ª—å
                //     + –∏–≥—Ä–æ–∫.–ú–∞—Å–æ–Ω
                //     + –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥
                //     + –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω
                // )
                // –∫–ª—é—á–∏–í–Ø—á–µ–π–∫—É –∫–ª—é—á–∏
            ]
        )
        |> tbody []
        // List.fold (fun (—Å, –º, —Ä, –¥) –∏–≥—Ä–æ–∫ ->
        //     —Å + –∏–≥—Ä–æ–∫.–°–ø–∞—Å–∏—Ç–µ–ª—å
        //     , –º + –∏–≥—Ä–æ–∫.–ú–∞—Å–æ–Ω
        //     , —Ä + –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥
        //     , –¥ + –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω
        // ) (0., 0., 0., 0.) —Ä–µ–π—Ç–∏–Ω–≥
        // |> fun (—Å, –º, —Ä, –¥) -> tfoot [] [
        //     td [] []
        //     td [] []
        //     td [] []
        //     —Å / 100. |> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        //     –º / 100. |> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        //     td [] []
        //     —Ä / 100. |> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        //     –¥ / 100. |> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        //     td [] []
        // ]
    ]
