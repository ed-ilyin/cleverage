module Cleverage.Client.Table
open Bolero.Html

type –°–∏–º–≤–æ–ª = string
type –ò–º—è = string
type –†–æ–ª—å = –°–ø–∞—Å–∏—Ç–µ–ª—å | –ú–∞—Å–æ–Ω | –†–µ–ø—Ç–∏–ª–æ–∏–¥ | –î–µ–º–æ–Ω

type –ò–≥—Ä–æ–∫ = {
    –°–∏–º–≤–æ–ª: –°–∏–º–≤–æ–ª
    –ò–º—è: –ò–º—è
    –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: int
    –°–ø–∞—Å–∏—Ç–µ–ª—å: float
    –ú–∞—Å–æ–Ω: float
    –†–µ–ø—Ç–∏–ª–æ–∏–¥: float
    –î–µ–º–æ–Ω: float
    –†–∞–±: bool
    –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ: string list
}

type –ú–æ–¥–µ–ª—å = Map<–°–∏–º–≤–æ–ª, –ò–≥—Ä–æ–∫>

type –î–µ–π—Å—Ç–≤–∏–µ =
    | –ó–µ–≤–Ω—É–ª
    | –ü—Ä–æ–±–∞—Å–∏–ª
    | –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç of –°–∏–º–≤–æ–ª
    | –ü–æ–ª—É—á–∏–ª–ö–ª—é—á–ù–µ of –†–æ–ª—å * –°–∏–º–≤–æ–ª
    | –ì–æ–≤–æ—Ä–∏—Ç–ß—Ç–æ–ü–æ–ª—É—á–∏–ª–ö–ª—é—á–ù–µ of –†–æ–ª—å * –°–∏–º–≤–æ–ª
    | –ü—Ä–∏–∑–Ω–∞–ª—Å—è–ß—Ç–æ–ù–µ of –†–æ–ª—å
    | –ü—Ä–æ—Ä–æ—á–∏—Ç of
        —Å–ø–∞—Å–∏—Ç–µ–ª—å: –°–∏–º–≤–æ–ª * —Ä–µ–ø—Ç–∏–ª—å1: –°–∏–º–≤–æ–ª * —Ä–µ–ø—Ç–∏–ª—å2: –°–∏–º–≤–æ–ª * –¥–µ–º–æ–Ω: –°–∏–º–≤–æ–ª
    | –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ of –°–∏–º–≤–æ–ª
    | –ü–æ—â–∞–¥–∏–ª of –°–∏–º–≤–æ–ª
    | –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ of –†–æ–ª—å
    | –ü–æ—Å—Ç–∞–≤–∏–ª–ù–∞ of –°–∏–º–≤–æ–ª
    | –°–æ–≤—Ä–∞–ª
    | –°–∫–∞–∑–∞–ª–ü—Ä–∞–≤–¥—É
    | –¢–æ–ø–∏—Ç of –°–∏–º–≤–æ–ª
    | –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ of string

let –∏–≥—Ä–∞ = "DeepSkyBlue Status"
let —è = "üë®üèø‚Äçü¶∞"

let –∏–≥—Ä–æ–∫–∏ =
    Map.ofList [
        "ü¶â", "–ú—É—Ç–∞–Ω—Ç"
        "‚ôü", "–ñ–º—ã—Ö"
        "üë®üèø‚Äçü¶∞", "–ü–∞–ø—É–∞—Å"
        "üçë", "–ó–∞–±–∞–≤–∞"
        "ü¶ï", "–ë—É—Ä–∞—Ç–∏–Ω–æ"
        "üë£", "–ú–∞—Ä–∫–∏–∑–∞"
        "üë∂", "–ö–∞—Ä–∞–±–∞—Å"
        "‚ò¢Ô∏è", "–°–∏–º–ø–∞—Ç—è–≥–∞"
        "üéÉ", "–ê–≤–∞—Ç–∞—Ä"
        "üòé", "–®–∞–π—Ç–∞–Ω"
    ]

let —Å–æ–±—ã—Ç–∏—è = [
    "‚ôü", –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ "–ü–æ–ø—Ä–∞–≤–∏–ª –æ—á–∫–∏"
    "üéÉ", –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ "—Å–∫–∞–∑–∞–ª \"–∫–∞–∫\" –º–∞—Å–æ–Ω"
    "‚ò¢Ô∏è", –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ "–Ω–µ —Å–∫–∞–∑–∞–ª —á—Ç–æ –º–∞—Å–æ–Ω"
    "üë∂", –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ "–Ω–∞–∏–≥—Ä–∞–Ω–Ω–æ –∑–µ–≤–∞–ª"
    "üòé", –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ "—Å—Ç–∞—Ä–∞–ª—Å—è –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏"
    "ü¶â", –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ "–Ω—Ä–∞–≤–∏—Ç—Å—è —á—Ç–æ –º–∞—Å–æ–Ω"
    "üë£", –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ "—Ö–æ—á–µ—Ç –≤—Å–µ—Ö –∑–∞–Ω—è—Ç—ã—Ö –≤—ã–Ω–æ—Å–∏—Ç—å, –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–∞–∫ –º—É—Ç–∞–Ω—Ç –ø–æ—Å–ª—É—à–∞–µ—Ç –≤—Å–µ—Ö"
    // "ü¶ï", –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ "–ë—É—Ä–∞—Ç–∏–Ω–æ"
    "üçë", –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ "—Å–∫–ª–∞–¥–Ω–æ –≥–æ–≤–æ—Ä–∏–ª–∞"
    "‚ôü", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë∂"
    "ü¶â", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë∂"
    "‚ò¢Ô∏è", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë®üèø‚Äçü¶∞"
    "üë®üèø‚Äçü¶∞", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë∂"
    "üçë", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "‚ò¢Ô∏è"
    "ü¶ï", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë∂"
    "üë£", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "‚ò¢Ô∏è"
    "üë∂", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë®üèø‚Äçü¶∞"
    "üòé", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üéÉ"
    "üéÉ", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë®üèø‚Äçü¶∞"
    // –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ
    "ü¶â", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë®üèø‚Äçü¶∞"
    "üéÉ", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë®üèø‚Äçü¶∞"
    "üçë", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë®üèø‚Äçü¶∞"
    "‚ò¢Ô∏è", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë∂"
    "ü¶ï", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë∂"
    "‚ôü", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë∂"
    "üòé", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë∂"
    "üë£", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üë∂"
    "üë∂", –ü—Ä–∏–∑–Ω–∞–ª—Å—è–ß—Ç–æ–ù–µ –°–ø–∞—Å–∏—Ç–µ–ª—å
    "üë∂", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –ú–∞—Å–æ–Ω
    // –ù–æ—á—å 1
    "‚ò¢Ô∏è", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –î–µ–º–æ–Ω
    "ü¶ï", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –†–µ–ø—Ç–∏–ª–æ–∏–¥
    // "üë£", –ì–æ–≤–æ—Ä–∏—Ç–ß—Ç–æ–ü–æ–ª—É—á–∏–ª–ö–ª—é—á–ù–µ (–†–µ–ø—Ç–∏–ª–æ–∏–¥, "üéÉ")
    "üë®üèø‚Äçü¶∞", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üçë"
    "üçë", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üòé"
    "üë£", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üòé"
    "ü¶â", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "üçë"
    "üòé", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "ü¶â"
    "üéÉ", –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ "‚ôü"
    // –¥–µ–Ω—å
    "üòé", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –†–µ–ø—Ç–∏–ª–æ–∏–¥
    // –Ω–æ—á—å
    "üéÉ", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –î–µ–º–æ–Ω
    "üéÉ", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –†–µ–ø—Ç–∏–ª–æ–∏–¥
    "üòé", –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –°–ø–∞—Å–∏—Ç–µ–ª—å
]

let –Ω–æ–≤—ã–π–ò–≥—Ä–æ–∫ —Å–∏–º–≤–æ–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = {
        –°–∏–º–≤–æ–ª = —Å–∏–º–≤–æ–ª
        –ò–º—è = Map.tryFind —Å–∏–º–≤–æ–ª –∏–≥—Ä–æ–∫–∏ |> Option.defaultValue ""
        –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        –°–ø–∞—Å–∏—Ç–µ–ª—å = 0.1
        –ú–∞—Å–æ–Ω = 0.6
        –†–µ–ø—Ç–∏–ª–æ–∏–¥ = 0.2
        –î–µ–º–æ–Ω = 0.1
        –†–∞–± = false
        –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ = []
    }

let –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ =
    Map.add –æ–Ω (
        match Map.tryFind –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ with
        | None -> –Ω–æ–≤—ã–π–ò–≥—Ä–æ–∫ –æ–Ω 1
        | Some –∏–≥—Ä–æ–∫ ->
            { –∏–≥—Ä–æ–∫ with –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + 1 }
    ) —Å–æ—Å—Ç–æ—è–Ω–∏–µ

let –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ =
    Map.add –æ–Ω (
        match Map.tryFind –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ with
        | None -> –Ω–æ–≤—ã–π–ò–≥—Ä–æ–∫ –æ–Ω -1
        | Some –∏–≥—Ä–æ–∫ ->
            { –∏–≥—Ä–æ–∫ with –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - 1 }
    ) —Å–æ—Å—Ç–æ—è–Ω–∏–µ

let –º–∞—Ç—Ä–∏—Ü–∞–ò–∑–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ =
    Map.toList —Å–æ—Å—Ç–æ—è–Ω–∏–µ |> List.map (fun (_, –∏–≥—Ä–æ–∫) ->
        [ –∏–≥—Ä–æ–∫.–°–ø–∞—Å–∏—Ç–µ–ª—å; –∏–≥—Ä–æ–∫.–ú–∞—Å–æ–Ω; –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥; –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω ]
    )

let –∏–≥—Ä–æ–∫–ò–∑–ú–∞—Ç—Ä–∏—Ü—ã —Å—Ç—Ä–æ–∫–∞–ú–∞—Ç—Ä–∏—Ü—ã –∏–≥—Ä–æ–∫ =
    match —Å—Ç—Ä–æ–∫–∞–ú–∞—Ç—Ä–∏—Ü—ã with
    | [ —Å–ø–∞—Å–∏—Ç–µ–ª—å; –º–∞—Å–æ–Ω; —Ä–µ–ø—Ç–∏–ª–æ–∏–¥; –¥–µ–º–æ–Ω ] ->
        { –∏–≥—Ä–æ–∫ with
            –°–ø–∞—Å–∏—Ç–µ–ª—å = —Å–ø–∞—Å–∏—Ç–µ–ª—å
            –ú–∞—Å–æ–Ω = –º–∞—Å–æ–Ω
            –†–µ–ø—Ç–∏–ª–æ–∏–¥ = —Ä–µ–ø—Ç–∏–ª–æ–∏–¥
            –î–µ–º–æ–Ω = –¥–µ–º–æ–Ω
        }
    | _ -> –∏–≥—Ä–æ–∫

let —Å–æ—Å—Ç–æ—è–Ω–∏–µ–ò–∑–ú–∞—Ç—Ä–∏—Ü—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü–∞ =
    Map.toList —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    |> List.map snd
    |> List.map2 –∏–≥—Ä–æ–∫–ò–∑–ú–∞—Ç—Ä–∏—Ü—ã –º–∞—Ç—Ä–∏—Ü–∞
    |> List.map (fun –∏–≥—Ä–æ–∫ -> –∏–≥—Ä–æ–∫.–°–∏–º–≤–æ–ª, –∏–≥—Ä–æ–∫)
    |> Map.ofList

let –∫–ª—é—á–ù–µ –Ω–µ–†–æ–ª—å –æ–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ =
    let —Ä–æ–ª—å =
        match –Ω–µ–†–æ–ª—å with
            –°–ø–∞—Å–∏—Ç–µ–ª—å -> 0 | –ú–∞—Å–æ–Ω -> 1 | –†–µ–ø—Ç–∏–ª–æ–∏–¥ -> 2 | –î–µ–º–æ–Ω -> 3
    let –∏–≥—Ä–æ–∫ = Map.toList —Å–æ—Å—Ç–æ—è–Ω–∏–µ |> List.map fst |> List.findIndex ((=) –æ–Ω)
    –º–∞—Ç—Ä–∏—Ü–∞–ò–∑–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    |> Matrix.changeMatrix —Ä–æ–ª—å –∏–≥—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    |> —Å–æ—Å—Ç–æ—è–Ω–∏–µ–ò–∑–ú–∞—Ç—Ä–∏—Ü—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ

let —Ä–∞–± —Å–∏–º–≤–æ–ª –º–æ–¥–µ–ª—å =
    match Map.tryFind —Å–∏–º–≤–æ–ª –º–æ–¥–µ–ª—å with
    | None -> –º–æ–¥–µ–ª—å
    | Some –∏–≥—Ä–æ–∫ -> Map.add —Å–∏–º–≤–æ–ª { –∏–≥—Ä–æ–∫ with –†–∞–± = true } –º–æ–¥–µ–ª—å

let –≤—Å–µ–í–†–∞–±—Å—Ç–≤–µ–ù–µ–î–µ–º–æ–Ω—ã =
    Map.map
        (fun _ –∏–≥—Ä–æ–∫ -> if –∏–≥—Ä–æ–∫.–†–∞–± then { –∏–≥—Ä–æ–∫ with –î–µ–º–æ–Ω = 0. } else –∏–≥—Ä–æ–∫)

let —Ç–æ—á–Ω–æ _ = 0.
let –º–æ–∂–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ = –∑–Ω–∞—á–µ–Ω–∏–µ / 2.
let –Ω–µ–º–Ω–æ–≥–æ = ((*) 1.1)

let –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–Ω —Å–¥–µ–ª–∞–ª –º–∏—Ä =
    match Map.tryFind –æ–Ω –º–∏—Ä with
    | None -> –º–∏—Ä
    | Some –∏–≥—Ä–æ–∫ ->
        Map.add –æ–Ω
            { –∏–≥—Ä–æ–∫ with –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ = –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ @ [ —Å–¥–µ–ª–∞–ª ] }
            –º–∏—Ä

let —Ä–∞—Å–∫–æ–ª–±–∞—Å –º–∏—Ä = function
    | –æ–Ω, –ó–µ–≤–Ω—É–ª | –æ–Ω, –ü—Ä–æ–±–∞—Å–∏–ª -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω –º–∏—Ä
    | _, –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç –µ–≥–æ  -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –µ–≥–æ –º–∏—Ä
    | –æ–Ω, –ü–æ–ª—É—á–∏–ª–ö–ª—é—á–ù–µ (—Ä–æ–ª—å, –∫—Ç–æ) ->
        –∫–ª—é—á–ù–µ —Ä–æ–ª—å –æ–Ω —Ç–æ—á–Ω–æ –º–∏—Ä |> –∫–ª—é—á–ù–µ —Ä–æ–ª—å –∫—Ç–æ —Ç–æ—á–Ω–æ
    | –æ–Ω, –ì–æ–≤–æ—Ä–∏—Ç–ß—Ç–æ–ü–æ–ª—É—á–∏–ª–ö–ª—é—á–ù–µ (—Ä–æ–ª—å, –∫—Ç–æ) ->
        –∫–ª—é—á–ù–µ —Ä–æ–ª—å –æ–Ω –º–æ–∂–µ—Ç –º–∏—Ä |> –∫–ª—é—á–ù–µ —Ä–æ–ª—å –∫—Ç–æ –º–æ–∂–µ—Ç
    | –æ–Ω, –ü—Ä–∏–∑–Ω–∞–ª—Å—è–ß—Ç–æ–ù–µ —Ä–æ–ª—å -> –∫–ª—é—á–ù–µ —Ä–æ–ª—å –æ–Ω –º–æ–∂–µ—Ç –º–∏—Ä
    | –æ–Ω, –ü—Ä–æ—Ä–æ—á–∏—Ç (—Å–ø–∞—Å–∏—Ç–µ–ª—å, —Ä–µ–ø—Ç–∏–ª—å1, —Ä–µ–ø—Ç–∏–ª—å2, –¥–µ–º–æ–Ω) ->
        –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∞—Å–∏—Ç–µ–ª—å –º–∏—Ä
        |> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π —Ä–µ–ø—Ç–∏–ª—å1
        |> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π —Ä–µ–ø—Ç–∏–ª—å2
        |> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –¥–µ–º–æ–Ω
        |> –∫–ª—é—á–ù–µ –°–ø–∞—Å–∏—Ç–µ–ª—å —Å–ø–∞—Å–∏—Ç–µ–ª—å –Ω–µ–º–Ω–æ–≥–æ
        |> –∫–ª—é—á–ù–µ –†–µ–ø—Ç–∏–ª–æ–∏–¥ —Ä–µ–ø—Ç–∏–ª—å1 –Ω–µ–º–Ω–æ–≥–æ
        |> –∫–ª—é—á–ù–µ –†–µ–ø—Ç–∏–ª–æ–∏–¥ —Ä–µ–ø—Ç–∏–ª—å2 –Ω–µ–º–Ω–æ–≥–æ
        |> –∫–ª—é—á–ù–µ –î–µ–º–æ–Ω –¥–µ–º–æ–Ω –Ω–µ–º–Ω–æ–≥–æ
    | –æ–Ω, –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ –º–µ–Ω—è when –º–µ–Ω—è = —è -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω –º–∏—Ä
    | –æ–Ω, –¢–æ–ø–∏—Ç –µ–≥–æ -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω –º–∏—Ä
    | –æ–Ω, –ì–æ–ª–æ—Å—É–µ—Ç–ü—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –Ω–µ–≥–æ –º–∏—Ä
    | –æ–Ω, –ü–æ—â–∞–¥–∏–ª –µ–≥–æ -> –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –µ–≥–æ –º–∏—Ä
    | –æ–Ω, –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ –î–µ–º–æ–Ω -> —Ä–∞–± –æ–Ω –º–∏—Ä |> –≤—Å–µ–í–†–∞–±—Å—Ç–≤–µ–ù–µ–î–µ–º–æ–Ω—ã
    | –æ–Ω, –ü–æ—Ä–∞–±–æ—â—ë–Ω–ù–µ —Ä–æ–ª—å -> –∫–ª—é—á–ù–µ —Ä–æ–ª—å –æ–Ω —Ç–æ—á–Ω–æ –º–∏—Ä |> —Ä–∞–± –æ–Ω
    | –æ–Ω, –°–æ–≤—Ä–∞–ª -> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω –º–∏—Ä
    | –æ–Ω, –°–∫–∞–∑–∞–ª–ü—Ä–∞–≤–¥—É -> –º–µ–Ω–µ–µ–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ–Ω –º–∏—Ä
    | –æ–Ω, –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–ª ->
        –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–Ω —Å–¥–µ–ª–∞–ª –º–∏—Ä |> –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–µ–π –æ–Ω
    | –æ–Ω, –ü–æ—Å—Ç–∞–≤–∏–ª–ù–∞ _ -> –º–∏—Ä

let —Ä–µ–π—Ç–∏–Ω–≥ =
    List.fold —Ä–∞—Å–∫–æ–ª–±–∞—Å (Map.map (fun —Å–∏–º–≤–æ–ª _ -> –Ω–æ–≤—ã–π–ò–≥—Ä–æ–∫ —Å–∏–º–≤–æ–ª 0) –∏–≥—Ä–æ–∫–∏)
        —Å–æ–±—ã—Ç–∏—è
    |> Map.toList
    |> List.map snd

// VIEW

let –∫–ª—é—á–∏–í–Ø—á–µ–π–∫—É –∫–ª—é—á–∏ =
    match Set.toList –∫–ª—é—á–∏ |> List.map (sprintf "–ù–µ-%A") with
    | [] -> ""
    | –∫–ª—é—á–∏ -> List.reduce (sprintf "%s, %s") –∫–ª—é—á–∏
    |> text //|> List.singleton |> td []

let –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å = (*) 100. >> sprintf "%.0f" >> text //>> List.singleton >> td []

let –ø–ª–æ—Ö–æ—Å—Ç—å –∏–≥—Ä–æ–∫ =
    let –ø—Ä–æ—Ü–µ–Ω—Ç—ã = (–∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥ + –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω) * 100.
    let ``class`` =
        if –∏–≥—Ä–æ–∫.–†–∞–± then "progress is-small is-warning" else "progress is-small"
    progress [
        attr.``class`` ``class``
        attr.value –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        attr.max 100
    ] [ sprintf "%.0f" –ø—Ä–æ—Ü–µ–Ω—Ç—ã |> text ]

let h = text >> List.singleton >> th []

let join delimeter = function
    | [] -> ""
    | [ e ] -> e
    | list -> List.reduce (fun s1 s2 -> s1 + delimeter + s2) list

let –∫–æ–ª–æ–Ω–∫–∞ ``class`` =
    span [ join " " [ "column pt-0 pb-0"; ``class`` ] |> attr.``class`` ]

let —Ä–æ–ª—å –∑–Ω–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç =
    –∫–æ–ª–æ–Ω–∫–∞ "is-narrow" [ sprintf "%s %.0f%%" –∑–Ω–∞–∫ (–ø—Ä–æ—Ü–µ–Ω—Ç * 100.) |> text ]

let block = div [ attr.``class`` "block" ]
let d ``class`` = div [ attr.``class`` ``class`` ]

let –∏–≥—Ä–æ–∫ –∏ =
    let ``class`` =
        if –∏.–†–∞–± then "panel-block has-text-grey-lighter" else "panel-block"
    d ``class`` [
        d "panel-icon is-size-1 mr-0" [ text –∏.–°–∏–º–≤–æ–ª ]
        d "column" [
            d "columns is-mobile" [
                –∫–æ–ª–æ–Ω–∫–∞ "" [ text –∏.–ò–º—è ]
                –∫–æ–ª–æ–Ω–∫–∞ "is-narrow"
                    [ sprintf "üò± %i" –∏.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å |> text ]
                —Ä–æ–ª—å "üßò" –∏.–°–ø–∞—Å–∏—Ç–µ–ª—å
                —Ä–æ–ª—å "üï∫" –∏.–ú–∞—Å–æ–Ω
            ]
            d "columns is-mobile" [
                –∫–æ–ª–æ–Ω–∫–∞ "" [ –ø–ª–æ—Ö–æ—Å—Ç—å –∏ ]
                —Ä–æ–ª—å "ü¶ñ" –∏.–†–µ–ø—Ç–∏–ª–æ–∏–¥
                —Ä–æ–ª—å "üòà" –∏.–î–µ–º–æ–Ω
            ]
            // List.map (text >> List.singleton >> –∫–æ–ª–æ–Ω–∫–∞ "") –∏.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            // |> d "columns is-mobile"
        ]
    ]

let view () =
    d "columns" [
        List.map (sprintf "%+A" >> text >> List.singleton >> div [])
            —Å–æ–±—ã—Ç–∏—è
        |> d "panel column"
        —Ä–µ–π—Ç–∏–Ω–≥
        |> List.sortBy (fun –∏–≥—Ä–æ–∫ -> –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥ + –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω)
        |> List.sortBy (fun –∏–≥—Ä–æ–∫ -> –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
        |> List.map –∏–≥—Ä–æ–∫
        |> d "panel column"
    ]

// let view () =
//     table [ attr.``class`` "table" ] [
//         thead []
//             [   h ""
//                 h "ü™Ü"
//                 h "üò±"
//                 h "üßò"
//                 h "üï∫"
//                 h "ü¶ñüêäü¶éüêçüòà"
//                 h "ü¶ñ"
//                 h "üòà"
//                 h "üßê"
//             ]
//         —Ä–µ–π—Ç–∏–Ω–≥
//         |> List.sortBy (fun –∏–≥—Ä–æ–∫ -> –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥ + –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω)
//         |> List.sortBy (fun –∏–≥—Ä–æ–∫ -> –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
//         |> List.map (fun –∏–≥—Ä–æ–∫ ->
//             tr [] [
//                 td [ attr.style "padding:0px;font-size:3rem"] [ text –∏–≥—Ä–æ–∫.–°–∏–º–≤–æ–ª ]
//                 td [
//                     if –∏–≥—Ä–æ–∫.–†–∞–± then "is-black" else ""
//                     |> attr.``class``
//                 ] [ Map.tryFind –∏–≥—Ä–æ–∫.–°–∏–º–≤–æ–ª –∏–≥—Ä–æ–∫–∏
//                     |> Option.defaultValue ""
//                     |> text
//                 ]
//                 td [] [ string –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å |> text ]
//                 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫.–°–ø–∞—Å–∏—Ç–µ–ª—å
//                 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫.–ú–∞—Å–æ–Ω
//                 –ø–ª–æ—Ö–æ—Å—Ç—å –∏–≥—Ä–æ–∫
//                 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥
//                 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω
//                 // –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (
//                 //     –∏–≥—Ä–æ–∫.–°–ø–∞—Å–∏—Ç–µ–ª—å
//                 //     + –∏–≥—Ä–æ–∫.–ú–∞—Å–æ–Ω
//                 //     + –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥
//                 //     + –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω
//                 // )
//                 // –∫–ª—é—á–∏–í–Ø—á–µ–π–∫—É –∫–ª—é—á–∏
//                 td [] [
//                     List.map (text >> List.singleton >> li [])
//                         –∏–≥—Ä–æ–∫.–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
//                     |> ol []
//                 ]
//             ]
//         )
//         |> tbody []
//         // List.fold (fun (—Å, –º, —Ä, –¥) –∏–≥—Ä–æ–∫ ->
//         //     —Å + –∏–≥—Ä–æ–∫.–°–ø–∞—Å–∏—Ç–µ–ª—å
//         //     , –º + –∏–≥—Ä–æ–∫.–ú–∞—Å–æ–Ω
//         //     , —Ä + –∏–≥—Ä–æ–∫.–†–µ–ø—Ç–∏–ª–æ–∏–¥
//         //     , –¥ + –∏–≥—Ä–æ–∫.–î–µ–º–æ–Ω
//         // ) (0., 0., 0., 0.) —Ä–µ–π—Ç–∏–Ω–≥
//         // |> fun (—Å, –º, —Ä, –¥) -> tfoot [] [
//         //     td [] []
//         //     td [] []
//         //     td [] []
//         //     —Å / 100. |> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
//         //     –º / 100. |> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
//         //     td [] []
//         //     —Ä / 100. |> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
//         //     –¥ / 100. |> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
//         //     td [] []
//         // ]
//     ]
